# -*- coding: utf-8 -*-
"""ServiceMesh-Mapper — Microservices Communication & Dependency Visualizer

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y1sEyvWd3UiDWmKNrdVAn4E3hqiXSSDK
"""

# ============================================================
# ServiceMesh-Mapper — Microservices Communication & Dependency Visualizer
# ============================================================

import os
import json
import random
import networkx as nx
import matplotlib.pyplot as plt
from datetime import datetime, timezone

# Configuration
EVENTS_FILE = "data/service_calls.json"
GRAPH_IMAGE = "data/service_map.png"
REPORT_FILE = "data/service_map_report.json"

NUM_SERVICES = 6
SERVICES = [f"svc{i}" for i in range(1, NUM_SERVICES+1)]
CALLS_PER_SIM = 15

os.makedirs(os.path.dirname(EVENTS_FILE), exist_ok=True)
os.makedirs(os.path.dirname(GRAPH_IMAGE), exist_ok=True)
os.makedirs(os.path.dirname(REPORT_FILE), exist_ok=True)

# Generate dummy call events if not exists
if not os.path.exists(EVENTS_FILE):
    events = []
    now_iso = datetime.now(timezone.utc).isoformat()
    for _ in range(CALLS_PER_SIM):
        caller = random.choice(SERVICES)
        callee = random.choice(SERVICES)
        if caller == callee:
            continue
        latency_ms = round(random.uniform(10, 500), 2)
        events.append({
            "timestamp": now_iso,
            "caller": caller,
            "callee": callee,
            "latency_ms": latency_ms
        })
    with open(EVENTS_FILE, "w", encoding="utf-8") as f:
        json.dump(events, f, indent=2)

# Load events
with open(EVENTS_FILE, "r", encoding="utf-8") as f:
    events = json.load(f)

# Build graph
G = nx.DiGraph()
for svc in SERVICES:
    G.add_node(svc)

for e in events:
    u = e["caller"]
    v = e["callee"]
    latency = e["latency_ms"]
    if G.has_edge(u, v):
        G[u][v]["latencies"].append(latency)
    else:
        G.add_edge(u, v, latencies=[latency])

# Prepare report data
report = {
    "timestamp": datetime.now(timezone.utc).isoformat(),
    "nodes": SERVICES,
    "edges": []
}
for u, v, data in G.edges(data=True):
    lat_list = data["latencies"]
    avg_latency = sum(lat_list) / len(lat_list)
    report["edges"].append({
        "from": u,
        "to": v,
        "avg_latency_ms": round(avg_latency, 2),
        "call_count": len(lat_list)
    })

# Save report
with open(REPORT_FILE, "w", encoding="utf-8") as f:
    json.dump(report, f, indent=2)

# Draw graph
pos = nx.spring_layout(G)
plt.figure(figsize=(10, 8))

# Create correct edge_labels dict
edge_labels = {
    (edge["from"], edge["to"]): f"{edge['call_count']} c / {edge['avg_latency_ms']} ms"
    for edge in report["edges"]
}

nx.draw(G, pos, with_labels=True, node_color="skyblue", node_size=1200,
        arrowstyle='->', arrowsize=20)
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_color='red')

plt.title("ServiceMesh-Mapper — Microservices Dependency Graph")
plt.tight_layout()
plt.savefig(GRAPH_IMAGE)
plt.show()

print("✅ ServiceMesh-Mapper completed. Graph saved to", GRAPH_IMAGE)
print("Report saved to", REPORT_FILE)